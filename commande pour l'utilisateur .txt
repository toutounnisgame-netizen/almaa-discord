cd C:\almaa-discord-ia-offline

2. Démarrage complet :
# Build et start (première fois)
docker compose -f docker-compose.windows.yml build --no-cache
docker compose -f docker-compose.windows.yml up -d

# Start rapide (après première installation)
docker compose -f docker-compose.windows.yml up -d
# 7. ATTENDRE 60 SECONDES (le temps que tout démarre)
Start-Sleep 60
# 8. VÉRIFIER QUE TOUT FONCTIONNE
docker ps -a
curl http://localhost:8000/api/health

# Avec logs en temps réel
docker compose -f docker-compose.windows.yml up



si postgrs fail :
docker run --rm -p 8000:8000 -e POSTGRES_USER=almaa_user -e POSTGRES_PASSWORD=almaa_pass -e CHROMA_HOST=chroma --network almaa-discord-ia-offline_internal almaa-discord-ia-offline-api



PS C:\almaa-discord-ia-offline> $body = '{"prompt": "can you tell me what is the actual subject?"}'
>> Invoke-RestMethod -Uri "http://localhost:8001/api/prompt" -Method POST -Body $body -ContentType "application/json"

message
-------
Prompt injected




3. Tests API :
curl http://localhost:8000/api/health

# Test injection prompt
$body = '{"prompt": "Discutez de intelligence artificielle"}'
Invoke-RestMethod -Uri "http://localhost:8000/api/prompt" -Method POST -Body $body -ContentType "application/json"

# WebSocket test (dans browser console)
# ws = new WebSocket('ws://localhost:8000/ws')
# ws.onmessage = e => console.log('Agent:', JSON.parse(e.data))



4. Vérifier status :
# Status tous containers
docker ps -a

# Vérifier variables d'environnement
docker compose -f docker-compose.windows.yml config

# Logs par service
docker logs almaa_api
docker logs almaa_postgres
docker logs almaa_nginx
docker logs almaa_redis
docker logs almaa_chroma





5. Tests connexions :
powershell
# Test Postgres
docker exec almaa_postgres pg_isready -U almaa_user
docker exec almaa_postgres psql -U almaa_user -d almaa_db -c "SELECT version();"

# Test Redis
docker exec almaa_redis redis-cli ping

# Test ChromaDB
curl http://localhost:8000/api/health  # Via API

# Test MinIO
# http://localhost:9001 (si port exposé)








6. Restart services :
powershell
# Restart service spécifique
docker compose -f docker-compose.windows.yml restart api
docker compose -f docker-compose.windows.yml restart postgres

# Restart tout
docker compose -f docker-compose.windows.yml restart

# Force rebuild + restart
docker compose -f docker-compose.windows.yml down
docker compose -f docker-compose.windows.yml build --no-cache
docker compose -f docker-compose.windows.yml up -d




7. Nettoyage en cas de problème :
powershell
# Arrêter tout
docker compose -f docker-compose.windows.yml down

# Nettoyer volumes (ATTENTION : perd les données)
docker volume prune -f

# Nettoyer images
docker image prune -f

# Nettoyer complètement (DANGER : perd TOUT)
docker system prune -af --volumes

# Rebuild complet
docker compose -f docker-compose.windows.yml build --no-cache
docker compose -f docker-compose.windows.yml up -d





12. Procédure quotidienne :
powershell
# 1. Start
cd C:\almaa-discord-ia-offline
docker compose -f docker-compose.windows.yml up -d

# 2. Vérifier
docker ps
curl http://localhost:8000/api/health

# 3. Test agents
$body = '{"prompt": "Bonjour les agents IA!"}'
Invoke-RestMethod -Uri "http://localhost:8000/api/prompt" -Method POST -Body $body -ContentType "application/json"

# 4. WebSocket (browser)
# ws = new WebSocket('ws://localhost:8000/ws')
# ws.onmessage = e => console.log(JSON.parse(e.data))

# 5. Stop (fin journée)
docker compose -f docker-compose.windows.yml down






13. Surveillance système :
powershell
# Utilisation ressources
docker stats

# Logs en temps réel
docker compose -f docker-compose.windows.yml logs -f api

# Grafana dashboard
# http://localhost:3001 (admin/admin)

# Espace disque
docker system df




















































































































































































































































































































































































































































































































































































































































































































































































































































































